// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        u_resolution: { value: [100, 100] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform Properties {
    vec2 u_resolution;
  };

  mat2 rotate2d(float angle) {
    return mat2(cos(angle),-sin(angle),
                sin(angle),cos(angle));
  }

  float variation(vec2 v1, vec2 v2, float strength, float speed) {
    float time = cc_time.x;
    return sin(dot(normalize(v1), normalize(v2)) * strength + time * speed) / 100.0;
  }

  vec3 paintCircle (vec2 uv, vec2 center, float rad, float width) {
    
    vec2 diff = center-uv;
    float len = length(diff);

    len += variation(diff, vec2(0.0, 1.0), 5.0, 2.0);
    len -= variation(diff, vec2(1.0, 0.0), 5.0, 2.0);
    
    float circle = smoothstep(rad-width, rad, len) - smoothstep(rad, rad+width, len);
    return vec3(circle);
  }

  void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
	  vec2 uv = v_uv0.xy;
    uv.x *= 1.5;
    uv.x -= 0.25;
    
    vec3 color;
    float radius = 0.35;
    vec2 center = vec2(0.5);
    
    //paint color circle
    color = paintCircle(uv, center, radius, 0.1);
    
    float time = cc_time.x;
    //color with gradient
    vec2 v = rotate2d(time) * uv;
    color *= vec3(v.x, v.y, 0.7-v.y*v.x);
    
    //paint white circle
    color += paintCircle(uv, center, radius, 0.01);

    // if(color.r + color.g + color.b == 0.){
    //     al = 0.;
    // }
    float al = 1.;
	  fragColor = vec4(color, al);
  }

  void main () {
    mainImage(gl_FragColor, gl_FragCoord.xy);
  }

}%
