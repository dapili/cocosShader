// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        u_resolution: { value: [100, 100] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform Properties{
    vec2 u_resolution;
  };

  const float PI = 3.1415926;

  float rand(float n) {
      return fract(sin(n) * 43758.5453123);
  }

  void main (void) {
      float maxJitter = 0.06;
      float duration = 0.3;
      float colorROffset = 0.01;
      float colorBOffset = -0.025;
      
      float time = mod(cc_time.x, duration * 2.0);
      float amplitude = max(sin(time * (PI / duration)), 0.0);
      
      float jitter = rand(v_uv0.y) * 2.0 - 1.0; // -1~1
      bool needOffset = abs(jitter) < maxJitter * amplitude;
      
      float textureX = v_uv0.x + (needOffset ? jitter : (jitter * amplitude * 0.006));
      vec2 textureCoords = vec2(textureX, v_uv0.y);
      
      vec4 mask = texture(texture, textureCoords);
      vec4 maskR = texture(texture, textureCoords + vec2(colorROffset * amplitude, 0.0));
      vec4 maskB = texture(texture, textureCoords + vec2(colorBOffset * amplitude, 0.0));
      
      gl_FragColor = vec4(maskR.r, mask.g, maskB.b, mask.a);
  }

}%
