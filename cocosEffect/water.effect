// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        u_resolution: { value: [100, 100] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform Properties {
    vec2 u_resolution;
  };

  #define F cos(x-y)*cos(y),sin(x+y)*sin(y)

  vec2 s(vec2 p) {
    float d=cc_time.x*0.2,x=8.*(p.x+d),y=8.*(p.y+d);
    return vec2(F);
  }

  void mainImage( out vec4 fragColor ) {
    // 换成resolution
    vec2 rs = u_resolution.xy;
    vec2 uv = v_uv0;
    vec2 q = uv+2./u_resolution.x*(s(uv)-s(uv+rs));
    //反转y
    // q.y=1.-q.y;
    fragColor = texture2D(texture,q);
  }

  void main () {
    mainImage(gl_FragColor);
  }

}%
