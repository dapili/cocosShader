// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        alpha: { value: 0.3, editor: { range:[0, 1, 0.1], slide: true, tooltip: '透明度检测值'}}
        outlineWidth: { value: 0.01, editor: { range:[0, 1, 0.01], slide: true, tooltip: '描边宽度'}}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>

  in vec3 a_position;
  in vec4 a_color;
  in vec2 a_uv0;

  out vec4 v_color;
  out vec2 v_uv0;

  void main () {
    v_uv0 = a_uv0;
    v_color = a_color;
    gl_Position = cc_matViewProj* vec4(a_position, 1);
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <texture>

  in vec4 v_color;
  in vec2 v_uv0;

  uniform sampler2D texture;

  uniform Properties{
    float alpha;
    float outlineWidth;
  };

  //检查pos点是否需要描边
  bool checkIsMakeOutline(vec2 pos){
    vec4 color = texture2D(texture, pos);
    if(color.a <= alpha || outlineWidth == 0.0)return false;

    //检测当前点周围的8个点的alpha值
    color = texture2D(texture, pos + vec2(0, outlineWidth));
    if(color.a <= alpha)return true;
    color = texture2D(texture, pos + vec2(outlineWidth, outlineWidth));
    if(color.a <= alpha)return true;
    color = texture2D(texture, pos + vec2(outlineWidth, 0));
    if(color.a <= alpha)return true;
    color = texture2D(texture, pos + vec2(outlineWidth, -outlineWidth));
    if(color.a <= alpha)return true;
    color = texture2D(texture, pos + vec2(0, -outlineWidth));
    if(color.a <= alpha)return true;
    color = texture2D(texture, pos + vec2(-outlineWidth, -outlineWidth));
    if(color.a <= alpha)return true;
    color = texture2D(texture, pos + vec2(-outlineWidth, 0));
    if(color.a <= alpha)return true;
    color = texture2D(texture, pos + vec2(-outlineWidth, outlineWidth));
    if(color.a <= alpha)return true;
    
    //当前点已是纹理边缘
    if(pos.x <= outlineWidth || pos.x >= 1.0 - outlineWidth)return true;
    if(pos.y <= outlineWidth || pos.y >= 1.0 - outlineWidth)return true;

    return false;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    CCTexture(texture, v_uv0, o);

    if(checkIsMakeOutline(v_uv0)){
      //直接改变颜色值
      o = vec4(1, 0, 0, 1.);
    }

    gl_FragColor = o;
  }
}%
